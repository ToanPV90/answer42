<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.samjdtechnologies</groupId>
	<artifactId>answer42</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>answer42</name>
	<description>
		Answer42 is a sophisticated AI-powered platform for academic 
		researchers, students, and scholars to upload, analyze, and 
		interact with research papers using multiple AI providers. The 
		platform combines advanced paper processing with intelligent chat 
		capabilities and a revolutionary multi-agent processing pipeline 
		to make academic research more efficient and insightful.
	</description>
	<url/>
	<licenses>
		<license>
			<name>Answer42 - Agents as a Service (AaaS) License Agreement</name>
			<url>https://github.com/samjd-zz/answer42/blob/main/LICENSE</url>
			<distribution>repo</distribution>
			<comments>Proprietary license for Answer42 AI-powered academic research platform</comments>
		</license>
	</licenses>
	<developers>
		<developer>
			<id>samjd-zz</id>
			<name>Shawn Jackson Dyck</name>
			<email>shawn@samjdtechnologies.com</email>
			<roles>
				<role>developer</role>
				<role>owner</role>
			</roles>
			<organization>SAMJD Technologies</organization>
			<organizationUrl>https://samjdtechnologies.com</organizationUrl>
		</developer>
	</developers>
	<scm>
		<connection>scm:git:https://github.com/samjd-zz/answer42.git</connection>
		<developerConnection>scm:git:git@github.com:samjd-zz/answer42.git</developerConnection>
		<tag>HEAD</tag>
		<url>https://github.com/samjd-zz/answer42</url>
	</scm>
	<properties>
		<java.version>21</java.version>
		<vaadin.version>24.7.3</vaadin.version>
		<lombok.version>1.18.34</lombok.version>
		<!-- Maven compiler properties for consistency -->
		<maven.compiler.release>21</maven.compiler.release>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>
	<repositories>
		<repository>
			<id>central</id>
			<name>Maven Central</name>
			<url>https://repo.maven.apache.org/maven2</url>
		</repository>
		<repository>
			<id>vaadin-prereleases</id>
			<url>https://maven.vaadin.com/vaadin-prereleases</url>
		</repository>
		<repository>
			<id>vaadin-addons</id>
			<url>https://maven.vaadin.com/vaadin-addons</url>
		</repository>
		<repository>
			<id>vaadin-releases</id>
			<url>https://maven.vaadin.com/vaadin-releases</url>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-jose</artifactId>
		</dependency>

		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-spring-boot-starter</artifactId>
			<version>${vaadin.version}</version>
		</dependency>

		<!-- Lombok for reducing boilerplate -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- JWT Dependencies -->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>0.11.5</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>0.11.5</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>0.11.5</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		
		<dependency>
			<groupId>jakarta.transaction</groupId>
			<artifactId>jakarta.transaction-api</artifactId>
		</dependency>
		
		<!-- Hibernate Types for JSON and Array support -->
		<dependency>
			<groupId>com.vladmihalcea</groupId>
			<artifactId>hibernate-types-60</artifactId>
			<version>2.21.1</version>
		</dependency>
		
		<!-- preplexity via openAI-->
		<dependency>
			<groupId>org.springframework.ai</groupId>
			<artifactId>spring-ai-starter-model-openai</artifactId>
			<version>1.0.0-M8</version>
		</dependency>
		<!-- anthropic -->
		<dependency>
			<groupId>org.springframework.ai</groupId>
			<artifactId>spring-ai-starter-model-anthropic</artifactId>
			<version>1.0.0-M8</version>
		</dependency>
		
		<!-- Spring Batch for multi-agent pipeline orchestration -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-batch</artifactId>
		</dependency>
		
		<!-- Apache PDFBox for PDF text extraction -->
		<dependency>
			<groupId>org.apache.pdfbox</groupId>
			<artifactId>pdfbox</artifactId>
			<version>3.0.1</version>
		</dependency>
	</dependencies>
	
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.vaadin</groupId>
				<artifactId>vaadin-bom</artifactId>
				<version>${vaadin.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!-- Spring AI BOM (Bill of Materials) -->
			<dependency>
				<groupId>org.springframework.ai</groupId>
				<artifactId>spring-ai-bom</artifactId>
				<version>1.0.0-M8</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<pluginManagement>
			<plugins>
				<!-- Compiler plugin with Lombok annotation processing -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.12.1</version>
				</plugin>
				
				<!-- Checkstyle for enforcing code style -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>3.4.0</version>
					<dependencies>
						<dependency>
							<groupId>com.puppycrawl.tools</groupId>
							<artifactId>checkstyle</artifactId>
							<version>10.14.2</version>
						</dependency>
					</dependencies>
					<configuration>
						<configLocation>checkstyle.xml</configLocation>
						<encoding>UTF-8</encoding>
						<consoleOutput>true</consoleOutput>
						<failsOnError>true</failsOnError>
						<linkXRef>false</linkXRef>
						<outputFormat>plain</outputFormat>
						<violationSeverity>error</violationSeverity>
					</configuration>
				</plugin>
				
				<!-- PMD for static code analysis -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-pmd-plugin</artifactId>
					<version>3.22.0</version>
					<configuration>
						<failOnViolation>true</failOnViolation>
						<printFailingErrors>true</printFailingErrors>
						<rulesets>
							<ruleset>${project.basedir}/pmd-ruleset.xml</ruleset>
						</rulesets>
						<linkXRef>false</linkXRef>
						<sourceEncoding>UTF-8</sourceEncoding>
						<targetJdk>${java.version}</targetJdk>
						<analysisCache>true</analysisCache>
					</configuration>
				</plugin>
				
				<!-- SpotBugs for finding potential bugs -->
				<plugin>
					<groupId>com.github.spotbugs</groupId>
					<artifactId>spotbugs-maven-plugin</artifactId>
					<version>4.8.3.0</version>
					<configuration>
						<effort>Max</effort>
						<threshold>Medium</threshold>
						<xmlOutput>true</xmlOutput>
						<excludeFilterFile>spotbugs-exclude.xml</excludeFilterFile>
					</configuration>
				</plugin>
				
				<!-- Maven Enforcer Plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>3.4.1</version>
					<configuration>
						<rules>
							<dependencyConvergence/>
							<requireMavenVersion>
								<version>3.8.0</version>
							</requireMavenVersion>
							<requireJavaVersion>
								<version>21</version>
							</requireJavaVersion>
							<banDuplicatePomDependencyVersions/>
						</rules>
					</configuration>
				</plugin>

				<!-- JavaDoc standards enforcement -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>3.6.2</version>
					<configuration>
						<source>${java.version}</source>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		
		<plugins>
			<!-- Maven Compiler Plugin - Explicit annotation processing for future-proofing -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.12.1</version>
				<configuration>
					<release>${java.version}</release>
					<compilerArgs>
						<arg>-parameters</arg>
						<!-- Suppress the future javac warning -->
						<arg>-Xlint:-options</arg>
					</compilerArgs>
					<!-- Explicitly enable annotation processing -->
					<proc>full</proc>
					<!-- Explicitly specify Lombok processor -->
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
					</annotationProcessorPaths>
					<!-- Explicitly list the annotation processors -->
					<annotationProcessors>
						<annotationProcessor>lombok.launch.AnnotationProcessorHider$AnnotationProcessor</annotationProcessor>
					</annotationProcessors>
				</configuration>
			</plugin>

			<!-- Spring Boot Maven Plugin -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			
			<!-- Only declare plugins here that you want to actually execute -->
			<!-- The configuration comes from pluginManagement above -->
			
			<!-- Uncomment these if you want them to run automatically during build: -->
			<!-- <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<executions>
					<execution>
						<id>validate</id>
						<phase>validate</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<executions>
					<execution>
						<id>enforce-rules</id>
						<phase>validate</phase>
						<goals>
							<goal>enforce</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			-->
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>production</id>
			<dependencies>
				<dependency>
					<groupId>com.vaadin</groupId>
					<artifactId>vaadin-core</artifactId>
					<exclusions>
						<exclusion>
							<groupId>com.vaadin</groupId>
							<artifactId>vaadin-dev</artifactId>
						</exclusion>
					</exclusions>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>com.vaadin</groupId>
						<artifactId>vaadin-maven-plugin</artifactId>
						<version>${vaadin.version}</version>
						<executions>
							<execution>
								<id>frontend</id>
								<phase>compile</phase>
								<goals>
									<goal>prepare-frontend</goal>
									<goal>build-frontend</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<!-- Profile for running code quality checks -->
		<profile>
			<id>code-quality</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-checkstyle-plugin</artifactId>
						<executions>
							<execution>
								<id>checkstyle-check</id>
								<phase>validate</phase>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-pmd-plugin</artifactId>
						<executions>
							<execution>
								<id>pmd-check</id>
								<phase>verify</phase>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					
					<plugin>
						<groupId>com.github.spotbugs</groupId>
						<artifactId>spotbugs-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>spotbugs-check</id>
								<phase>verify</phase>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
